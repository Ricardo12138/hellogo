// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tmp/proto/datatest.proto

/*
Package datatest is a generated protocol buffer package.

It is generated from these files:
	tmp/proto/datatest.proto

It has these top-level messages:
	Fishmessageone
	Fishmessagetwo
*/
package datatest

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Fishmessageone struct {
	Fishfieldone string  `protobuf:"bytes,1,opt,name=fishfieldone" json:"fishfieldone,omitempty"`
	Fishfieldtwo []int64 `protobuf:"varint,2,rep,packed,name=fishfieldtwo" json:"fishfieldtwo,omitempty"`
}

func (m *Fishmessageone) Reset()                    { *m = Fishmessageone{} }
func (m *Fishmessageone) String() string            { return proto.CompactTextString(m) }
func (*Fishmessageone) ProtoMessage()               {}
func (*Fishmessageone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Fishmessageone) GetFishfieldone() string {
	if m != nil {
		return m.Fishfieldone
	}
	return ""
}

func (m *Fishmessageone) GetFishfieldtwo() []int64 {
	if m != nil {
		return m.Fishfieldtwo
	}
	return nil
}

type Fishmessagetwo struct {
	Fishfieldthree []bool `protobuf:"varint,1,rep,packed,name=fishfieldthree" json:"fishfieldthree,omitempty"`
	Fishfieldfour  string `protobuf:"bytes,2,opt,name=fishfieldfour" json:"fishfieldfour,omitempty"`
}

func (m *Fishmessagetwo) Reset()                    { *m = Fishmessagetwo{} }
func (m *Fishmessagetwo) String() string            { return proto.CompactTextString(m) }
func (*Fishmessagetwo) ProtoMessage()               {}
func (*Fishmessagetwo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Fishmessagetwo) GetFishfieldthree() []bool {
	if m != nil {
		return m.Fishfieldthree
	}
	return nil
}

func (m *Fishmessagetwo) GetFishfieldfour() string {
	if m != nil {
		return m.Fishfieldfour
	}
	return ""
}

func init() {
	proto.RegisterType((*Fishmessageone)(nil), "datatest.fishmessageone")
	proto.RegisterType((*Fishmessagetwo)(nil), "datatest.fishmessagetwo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Serviceone service

type ServiceoneClient interface {
	Fisheat(ctx context.Context, in *Fishmessageone, opts ...grpc.CallOption) (*Fishmessagetwo, error)
	Fishsleep(ctx context.Context, in *Fishmessagetwo, opts ...grpc.CallOption) (*Fishmessageone, error)
}

type serviceoneClient struct {
	cc *grpc.ClientConn
}

func NewServiceoneClient(cc *grpc.ClientConn) ServiceoneClient {
	return &serviceoneClient{cc}
}

func (c *serviceoneClient) Fisheat(ctx context.Context, in *Fishmessageone, opts ...grpc.CallOption) (*Fishmessagetwo, error) {
	out := new(Fishmessagetwo)
	err := grpc.Invoke(ctx, "/datatest.Serviceone/fisheat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceoneClient) Fishsleep(ctx context.Context, in *Fishmessagetwo, opts ...grpc.CallOption) (*Fishmessageone, error) {
	out := new(Fishmessageone)
	err := grpc.Invoke(ctx, "/datatest.Serviceone/fishsleep", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Serviceone service

type ServiceoneServer interface {
	Fisheat(context.Context, *Fishmessageone) (*Fishmessagetwo, error)
	Fishsleep(context.Context, *Fishmessagetwo) (*Fishmessageone, error)
}

func RegisterServiceoneServer(s *grpc.Server, srv ServiceoneServer) {
	s.RegisterService(&_Serviceone_serviceDesc, srv)
}

func _Serviceone_Fisheat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fishmessageone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceoneServer).Fisheat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datatest.Serviceone/Fisheat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceoneServer).Fisheat(ctx, req.(*Fishmessageone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Serviceone_Fishsleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fishmessagetwo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceoneServer).Fishsleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datatest.Serviceone/Fishsleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceoneServer).Fishsleep(ctx, req.(*Fishmessagetwo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Serviceone_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datatest.Serviceone",
	HandlerType: (*ServiceoneServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fisheat",
			Handler:    _Serviceone_Fisheat_Handler,
		},
		{
			MethodName: "fishsleep",
			Handler:    _Serviceone_Fishsleep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tmp/proto/datatest.proto",
}

// Client API for Egg service

type EggClient interface {
	Eggeat(ctx context.Context, in *Fishmessageone, opts ...grpc.CallOption) (*Fishmessageone, error)
	Eggsleep(ctx context.Context, in *Fishmessagetwo, opts ...grpc.CallOption) (*Fishmessagetwo, error)
}

type eggClient struct {
	cc *grpc.ClientConn
}

func NewEggClient(cc *grpc.ClientConn) EggClient {
	return &eggClient{cc}
}

func (c *eggClient) Eggeat(ctx context.Context, in *Fishmessageone, opts ...grpc.CallOption) (*Fishmessageone, error) {
	out := new(Fishmessageone)
	err := grpc.Invoke(ctx, "/datatest.egg/eggeat", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eggClient) Eggsleep(ctx context.Context, in *Fishmessagetwo, opts ...grpc.CallOption) (*Fishmessagetwo, error) {
	out := new(Fishmessagetwo)
	err := grpc.Invoke(ctx, "/datatest.egg/eggsleep", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Egg service

type EggServer interface {
	Eggeat(context.Context, *Fishmessageone) (*Fishmessageone, error)
	Eggsleep(context.Context, *Fishmessagetwo) (*Fishmessagetwo, error)
}

func RegisterEggServer(s *grpc.Server, srv EggServer) {
	s.RegisterService(&_Egg_serviceDesc, srv)
}

func _Egg_Eggeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fishmessageone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EggServer).Eggeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datatest.egg/Eggeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EggServer).Eggeat(ctx, req.(*Fishmessageone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Egg_Eggsleep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Fishmessagetwo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EggServer).Eggsleep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datatest.egg/Eggsleep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EggServer).Eggsleep(ctx, req.(*Fishmessagetwo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Egg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "datatest.egg",
	HandlerType: (*EggServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "eggeat",
			Handler:    _Egg_Eggeat_Handler,
		},
		{
			MethodName: "eggsleep",
			Handler:    _Egg_Eggsleep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tmp/proto/datatest.proto",
}

func init() { proto.RegisterFile("tmp/proto/datatest.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x4d, 0x22, 0x31, 0x19, 0xb4, 0xc2, 0x9e, 0x42, 0xf0, 0x50, 0x82, 0x48, 0xf0, 0xd0,
	0x85, 0x7a, 0xf3, 0x20, 0xf8, 0x02, 0x3d, 0xc4, 0x8b, 0x27, 0x61, 0xb5, 0x93, 0x6d, 0x20, 0xcd,
	0x84, 0xec, 0x68, 0xef, 0xbe, 0x82, 0x78, 0xf6, 0xa1, 0x7c, 0x05, 0x1f, 0x44, 0x76, 0x83, 0x85,
	0x95, 0xf6, 0xd2, 0xe3, 0x7c, 0xf3, 0xef, 0xbf, 0xff, 0xbf, 0x0b, 0x19, 0xaf, 0x7b, 0xd9, 0x0f,
	0xc4, 0x24, 0x97, 0x8a, 0x15, 0xa3, 0xe1, 0x99, 0x1b, 0x45, 0xf2, 0x37, 0xe7, 0x17, 0x9a, 0x48,
	0xb7, 0x28, 0x55, 0xdf, 0x48, 0xd5, 0x75, 0xc4, 0x8a, 0x1b, 0xea, 0xcc, 0xa8, 0x2b, 0x1e, 0x61,
	0x52, 0x37, 0x66, 0xb5, 0x46, 0x63, 0x94, 0x46, 0xea, 0x50, 0x14, 0x70, 0x6a, 0x49, 0xdd, 0x60,
	0xbb, 0xa4, 0x0e, 0xb3, 0x60, 0x1a, 0x94, 0x69, 0xe5, 0x31, 0x4f, 0xc3, 0x1b, 0xca, 0xc2, 0x69,
	0x54, 0x46, 0x95, 0xc7, 0x8a, 0x27, 0xcf, 0x99, 0x37, 0x24, 0xae, 0x46, 0x32, 0x2a, 0x56, 0x03,
	0x5a, 0xef, 0xa8, 0x4c, 0xaa, 0x7f, 0x54, 0x5c, 0xc2, 0xd9, 0x96, 0xd4, 0xf4, 0x3a, 0x64, 0xa1,
	0x8b, 0xe0, 0xc3, 0xf9, 0x57, 0x00, 0xf0, 0x80, 0xc3, 0x5b, 0xf3, 0xe2, 0x62, 0x2f, 0xe0, 0xc4,
	0xee, 0x51, 0xb1, 0xc8, 0x66, 0xdb, 0xc7, 0xf0, 0xbb, 0xe5, 0xbb, 0x37, 0x36, 0xed, 0xf9, 0xfb,
	0xf7, 0xcf, 0x47, 0x98, 0x16, 0xc7, 0x12, 0x15, 0xdf, 0x06, 0xd7, 0xe2, 0x1e, 0x52, 0x2b, 0x31,
	0x2d, 0x62, 0x2f, 0xf6, 0x9e, 0xcb, 0xf7, 0xde, 0x55, 0x1c, 0xcd, 0x3f, 0x03, 0x88, 0x50, 0x6b,
	0x71, 0x07, 0x31, 0x6a, 0x7d, 0x48, 0x32, 0xe7, 0x23, 0x16, 0x90, 0xa0, 0xd6, 0x87, 0x25, 0xb1,
	0xdd, 0x26, 0xae, 0x5b, 0x22, 0x62, 0xe9, 0x3c, 0x9e, 0x63, 0xf7, 0xf5, 0x37, 0xbf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x70, 0x7b, 0xad, 0xbf, 0x3e, 0x02, 0x00, 0x00,
}
